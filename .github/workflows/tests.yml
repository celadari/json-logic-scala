#name: Unittests
#on: [push]
#jobs:
#  retrieve-scala-versions:
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up JDK 11
#        uses: actions/setup-java@v2
#        with:
#          java-version: '11'
#          distribution: 'adopt'
#      - name: Retrieve Scala Versions from build.sbt file
#        id: set-matrix
#        run: |
#          scalaVersionPref=$(sbt +scalaBinaryVersion | sed -r 's/[^ \t\r\n\v\f0-9\.]([0-9]\.[0-9]+)/SCALA_VERSION\1/' | grep -oE 'CALA_VERSION[0-9]\.[0-9]+')
#          scala_versions=$(echo "$scalaVersionPref" | sed -r 's/CALA_VERSION([0-9]\.[0-9]+)/\1/' | tr '\n' ',')
#          scala_versions="[${scala_versions%?}]"
#          echo ::set-output name=matrix::"$scala_versions"
#    outputs:
#      scala_versions: ${{ steps.set-matrix.outputs.matrix }}
#
#  test-coverage:
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up JDK 11
#        uses: actions/setup-java@v2
#        with:
#          java-version: '11'
#          distribution: 'adopt'
#      - name: Cache Java modules
#        uses: actions/cache@v2
#        env:
#          cache-name: cache-java-modules
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./build.sbt') }}
#          restore-keys: |
#            ${{ runner.os }}-build-${{ env.cache-name }}-
#            ${{ runner.os }}-build-
#            ${{ runner.os }}-
#      - name: Cache Scala modules
#        uses: actions/cache@v2
#        env:
#          cache-name: cache-scala-modules
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./build.sbt') }}
#          restore-keys: |
#            ${{ runner.os }}-build-${{ env.cache-name }}-
#            ${{ runner.os }}-build-
#            ${{ runner.os }}-
#      - name: Cache Sbt modules
#        uses: actions/cache@v2
#        env:
#          cache-name: cache-sbt-modules
#        with:
#          path: ~/.sbt/1.0
#          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./build.sbt') }}
#          restore-keys: |
#            ${{ runner.os }}-build-${{ env.cache-name }}-
#            ${{ runner.os }}-build-
#            ${{ runner.os }}-
#      - name: Run Sbt Test and Generate Report on Multiple Scala Versions
#        run: |
#          sbt +coverage +test
#          sbt +coverageReport
#      - uses: actions/upload-artifact@v2
#        with:
#          name: coverage-report
#          path: ./target/scala-[0-9].[0-9][0-9]
#
#  upload-coverage:
#    runs-on: ubuntu-latest
#    needs: [retrieve-scala-versions, test-coverage]
#    strategy:
#      fail-fast: false
#      matrix:
#        scala_version: ${{ fromJSON(needs.retrieve-scala-versions.outputs.scala_versions) }}
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/download-artifact@v2
#        with:
#          name: coverage-report
#          path: ./target/
#      - uses: codecov/codecov-action@v2
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          directory: ./target/scala-${{ matrix.scala_version }}/
#          flags: unittests,${{ matrix.scala_version }}/scoverage-report/scoverage.xml
#          name: codecov-json-logic-scala
#          fail_ci_if_error: true
#          verbose: true
